{"version":3,"sources":["gql/getTalkList.js","gql/getProjectList.js","icons/Moon.jsx","icons/Sun.jsx","Header/Header.jsx","GridItem/GridItem.jsx","Page/Page.jsx","App.jsx","index.jsx"],"names":["GET_TALKLIST","gql","GET_PROJECTLIST","Moon","hidden","xmlns","width","height","viewBox","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","d","Sun","cx","cy","r","x1","y1","x2","y2","defaultValue","Header","localTheme","localStorage","getItem","useState","theme","setTheme","isThemeDark","setMode","useCallback","mode","setItem","document","body","classList","toggle","useEffect","window","matchMedia","userPrefersDark","matches","className","href","onClick","name","type","GridItem","image","slug","title","to","src","process","alt","Page","App","useQuery","loadingProjectList","loading","errorProjectList","error","dataProjectList","data","loadingTalkList","errorTalkList","dataTalkList","projectList","project","talkList","talk","path","exact","map","p","id","t","client","ApolloClient","uri","cache","InMemoryCache","ReactDOM","render","StrictMode","ApolloProvider","getElementById"],"mappings":"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","file":"static/js/main.3cbe54bd.chunk.js","sourcesContent":["import { gql } from '@apollo/client'\n\nexport const GET_TALKLIST = gql`\n    query GetTalkList {\n        talk(order_by: { id: desc }) {\n            id\n            image\n            slug\n            title\n        }\n    }\n`\n","import { gql } from '@apollo/client'\n\nexport const GET_PROJECTLIST = gql`\n    query GetProjectList {\n        project(order_by: { id: desc }) {\n            id\n            image\n            slug\n            title\n        }\n    }\n`\n","import { bool } from 'prop-types'\n\nexport function Moon({ hidden }) {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width=\"24\"\n      height=\"24\"\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      stroke=\"currentColor\"\n      strokeWidth=\"2\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      aria-hidden={hidden}\n    >\n      <path d=\"M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z\" />\n    </svg>\n  )\n}\n\nMoon.propTypes = {\n  hidden: bool,\n}\n\nMoon.defaultValue = {\n  hidden: false,\n}\n","import { bool } from 'prop-types'\n\nexport function Sun({ hidden }) {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width=\"24\"\n      height=\"24\"\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      stroke=\"currentColor\"\n      strokeWidth=\"2\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      aria-hidden={hidden}\n    >\n      <circle cx=\"12\" cy=\"12\" r=\"5\" />\n      <line x1=\"12\" y1=\"1\" x2=\"12\" y2=\"3\" />\n      <line x1=\"12\" y1=\"21\" x2=\"12\" y2=\"23\" />\n      <line x1=\"4.22\" y1=\"4.22\" x2=\"5.64\" y2=\"5.64\" />\n      <line x1=\"18.36\" y1=\"18.36\" x2=\"19.78\" y2=\"19.78\" />\n      <line x1=\"1\" y1=\"12\" x2=\"3\" y2=\"12\" />\n      <line x1=\"21\" y1=\"12\" x2=\"23\" y2=\"12\" />\n      <line x1=\"4.22\" y1=\"19.78\" x2=\"5.64\" y2=\"18.36\" />\n      <line x1=\"18.36\" y1=\"5.64\" x2=\"19.78\" y2=\"4.22\" />\n    </svg>\n  )\n}\n\nSun.propTypes = {\n  hidden: bool,\n}\n\nSun.defaultValue = {\n  hidden: false,\n}\n","import { useCallback, useEffect, useState } from 'react'\nimport { Moon, Sun } from '../icons'\nimport './Header.css'\n\nexport function Header() {\n  const localTheme = localStorage.getItem('theme')\n  const [theme, setTheme] = useState(localTheme)\n  const isThemeDark = theme === 'dark'\n\n  const setMode = useCallback(mode => {\n    localStorage.setItem('theme', mode)\n    document.body.classList.toggle('dark', isThemeDark)\n    setTheme(mode)\n  }, [isThemeDark])\n\n  const onClick = () => setMode(isThemeDark ? 'light' : 'dark')\n\n  useEffect(() => {\n    if (window.matchMedia && !localTheme) {\n      const userPrefersDark = window.matchMedia(\n        '(prefers-color-scheme: dark)',\n      ).matches\n      setMode(userPrefersDark ? 'dark' : 'light')\n    } else if (localTheme) {\n      setMode(localTheme)\n    } else {\n      setMode('light')\n    }\n  }, [localTheme, setMode])\n\n  return (\n    <header>\n      <div className=\"wrapper\">\n        <div>\n          <h1>\n            <a href=\"/website\" className=\"brand\">\n              Mireille Campourcy\n            </a>\n          </h1>\n          <p>Javascript developer</p>\n        </div>\n        <button onClick={onClick} name=\"switch-theme\" type=\"button\">\n          {isThemeDark ? <Sun /> : <Moon />}\n          <span>Passer en thème {isThemeDark ? 'clair' : 'foncé'}</span>\n        </button>\n      </div>\n    </header>\n  )\n}\n","import { Link } from 'react-router-dom'\nimport { string } from 'prop-types'\n\nimport './GridItem.css'\n\nexport function GridItem({ image, slug, title }) {\n  return (\n    <figure className=\"grid-item\">\n      <Link to={`/website/${slug}`}>\n        <img src={`${process.env.PUBLIC_URL}/img/${image}`} alt=\"\" />\n        <figcaption>{title}</figcaption>\n      </Link>\n    </figure>\n  )\n}\n\nGridItem.propTypes = {\n  image: string.isRequired,\n  slug: string.isRequired,\n  title: string.isRequired,\n}\n","import { string } from 'prop-types'\n\nimport './Page.css'\n\nexport function Page({ image, title }) {\n  return (\n    <>\n      <h1>{title}</h1>\n      <section className=\"section-page\">\n        <img\n          className=\"item-container img-fluid\"\n          src={`img/${image}`}\n          alt=\"\"\n        />\n        <p>Blabla</p>\n      </section>\n    </>\n  )\n}\n\nPage.propTypes = {\n  image: string.isRequired,\n  title: string.isRequired,\n}\n","import { useQuery } from '@apollo/client'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from 'react-router-dom'\nimport { GET_PROJECTLIST, GET_TALKLIST } from './gql'\nimport { Header } from './Header'\nimport { GridItem } from './GridItem'\nimport { Page } from './Page'\nimport './App.css'\n\nexport function App() {\n  const { loading: loadingProjectList, error: errorProjectList, data: dataProjectList } = useQuery(GET_PROJECTLIST)\n  const { loading: loadingTalkList, error: errorTalkList, data: dataTalkList } = useQuery(GET_TALKLIST)\n\n  if (loadingProjectList || loadingTalkList) return <p>Loading...</p>\n  if (errorProjectList || errorTalkList) return <p>Error :(</p>\n\n  const { project: projectList } = dataProjectList\n  const { talk: talkList } = dataTalkList\n\n  return (\n    <>\n      <Header />\n      <Router>\n        <main>\n          <Switch>\n            <Route path=\"/website\" exact>\n              <h2>Projects</h2>\n              <section className=\"grid\">\n                {projectList.map(p => <GridItem key={p.id} {...p} />)}\n              </section>\n              <h2>Talks</h2>\n              <section className=\"grid\">\n                {talkList.map(t => <GridItem key={t.id} {...t} />)}\n              </section>\n            </Route>\n            {projectList.map(project => (\n              <Route path={`/website/${project.slug}`} exact key={project.id}>\n                <Page {...project} />\n              </Route>\n            ))}\n            {talkList.map(talk => (\n              <Route path={`/website/${talk.slug}`} exact key={talk.id}>\n                <Page {...talk} />\n              </Route>\n            ))}\n          </Switch>\n        </main>\n      </Router>\n    </>\n  )\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { ApolloClient, ApolloProvider, InMemoryCache } from '@apollo/client'\nimport { App } from './App'\n\nconst client = new ApolloClient({\n  uri: process.env.REACT_APP_GRAPHQL_ENDPOINT,\n  cache: new InMemoryCache(),\n})\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n"],"sourceRoot":""}